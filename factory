#!/bin/bash +x

# TODO {{{
#
# Create a parameter (or conf) to avoid download sources, just run
# and to download only not build
# Move prerequisites to the packages
# Implement ordered building (PLANTS)
# - On git fetch if dir exist run git pull instead git clone
# the compilation steps (in case of no internet)
# - Create preexec and postexec methods
# - Move custom build methods to the blueprint
# - Add a way to list all valid blueprints and plants
# - Create a proxymode (elegant)
# 	PROXYPASS=${1}
# 	PROXYUSER="${2:-$(whoami)}"
# 	PROXYSERVER="${3:-'165.225.34.32:80'}"
# 	export http_proxy="http://${PROXYUSER}@${PROXYSERVER}"
# 	export https_proxy="http://${PROXYUSER}@${PROXYSERVER}"
# 	echo ${http_proxy}
# - Add a variable to point to BLUEPRINT (FACTORYBLUEPRINT)
# - Check all references to cd - and cd and change for pushd/popd
# - Write function to install Python packages (verify if is inst first)
# - Write function to install deb pkgs (Verify first if isn't already inst)
# - Stop production when a error ocurrs ( correctly )
#
# Create blueprints to the packages:
# ======================================================================
# gtkdoc
# many xml stuff required by gtkdoc
# gtk3
# libblkid
# libgs
# libpulse
# libudev
# libxine
#
# Follow the compilation guides from LFS documentation is a nice thing
# ======================================================================
# http://www.linuxfromscratch.org/blfs/view/svn/multimedia/libogg.html
# http://www.linuxfromscratch.org/blfs/view/svn/multimedia/libvorbis.html
# http://www.linuxfromscratch.org/blfs/view/svn/server/sqlite.html
# http://www.linuxfromscratch.org/blfs/view/svn/multimedia/pulseaudio.html
# http://www.linuxfromscratch.org/blfs/view/svn/general/nasm.html
# http://www.linuxfromscratch.org/blfs/view/svn/general/nasm.html
# http://www.linuxfromscratch.org/blfs/view/svn/multimedia/alsa-lib.html
# http://www.linuxfromscratch.org/blfs/view/svn/general/dbus.html
#
# Packages that will not installed thru blueprints right now
# ======================================================================
# xorg libraries (and dev)
# libdrm-2.4.70
# Mesa 12.0.1
# GLU
# FreeGLUT
# libmount
# xutils-dev
# libegl1-mesa-dev
# mesa-common-dev
# libdbus-1-dev
#
#}}}

declare -a FACTORY_CFLAGS
declare -a FACTORY_LDFLAGS

source %%FACTORY_CONFDIR%%/factory.config

export FACTORY_SRCDIR FACTORY_CONFDIR FACTORY_PREFIX
export FACTORY_CFLAGS FACTORY_LDFLAGS 

#}}}

# Support functions {{{
function ar_c_m_mi() {
autoreconf -fiv && \
./configure "${CONF_FLAGS[@]}" --prefix="${FACTORY_PREFIX}" && \
	make "${MAKE_FLAGS[@]}" && \
make install || return 1
}

function a_c_m_mi() {
./autogen.sh && \
./configure "${CONF_FLAGS[@]}" --prefix="${FACTORY_PREFIX}" && \
	make "${MAKE_FLAGS[@]}" && \
make install || return 1
}


function c_m_mi() {
./configure "${CONF_FLAGS[@]}" --prefix="${FACTORY_PREFIX}" && \
	make "${MAKE_FLAGS[@]}" && \
	make install || return 1
}


function m_mi() {
make "${MAKE_FLAGS[@]}" && \
	make install || return 1
}

function m_mip() {
make "${MAKE_FLAGS[@]}" && \
	make install PREFIX="${FACTORY_PREFIX}" || return 1
}

function b_cm_m_mi() {
mkdir build && \
	pushd build && \
	cmake -DCMAKE_INSTALL_PREFIX="${FACTORY_PREFIX}" .. && \
	make "${MAKE_FLAGS[@]}" && \
	make install && \
	popd
}

function p_s() {
python setup.py build
}

function fetch_cvs() {
while (( "${#}" )); do
	# CVSROOT="${REPOSITORY}"
	echo -ne "NOPASSWD\n" | \
		cvs -d "${REPOSITORY}" login
	cvs -d "${REPOSITORY}" checkout "${1}"
	shift
done
}

function fetch_svn() {
while (( "${#}" )); do
	SVN co "${REPOSITORY}/${1}" "${REPOSITORY_ALIAS}"
	shift
done
}

function fetch_git() {
while (( "${#}" )); do
	git clone "${REPOSITORY}/${1}" "${REPOSITORY_ALIAS}"
	shift
done
}

function fetch_hg() {
while (( "${#}" )); do
	hg clone "${REPOSITORY}/${1}" "${REPOSITORY_ALIAS}"
	shift
done
}


function fetch() {
while (( "${#}" )); do
	fetch "${METHOD}" "${1}"
	shift
done

}


function compile() {
# There are cases where repository conflict or use
# stupid names.
if [ -n "${REPOSITORY_ALIAS}" ]; then
	dstdir=${REPOSITORY_ALIAS}
else
	# Just basename
	dstdir=${1##*/}
	# Remove .git
	dstdir=${dstdir%*.git}
fi

pushd "${dstdir}" && \
	${BUILD} && \
	popd
}


function produce() {
# All blue print variables are local
#unset BUILD CONF_FLAGS MODULES REPOSITORY_ALIAS INSTALL_THIS_BLUEPRINT
#unset DPKGDEP PYDEP REPOSITORY METHOD
local BUILD CONF_FLAGS MODULES REPOSITORY_ALIAS INSTALL_THIS_BLUEPRINT
local DPKGDEP PYDEP REPOSITORY METHOD
local dstdir

if [ -z "${1}" ]; then
	echo "We need a blueprint. Choose from:"
	find "${FACTORY_CONFDIR}" -maxdepth 1 -name '*.conf' -exec basename {} \; | sed "s/.conf//g"
	return 1
fi

BLUEPRINT=${FACTORY_CONFDIR}/${1}.conf
if [ ! -r "${BLUEPRINT}" ]; then
	echo "${RED}Couldn't set up the blueprint for${CRST} ${BLUEPRINT}"
	return
fi

if [ "${INSTALL_THIS_BLUEPRINT}" = "NO" ]; then
	echo "${YELLOW}Plant ${CRST}${BLUEPRINT}${YELLOW} will not be installed${CRST}"
	return
fi

source "${BLUEPRINT}"
echo -ne "${GREEN}=========================================\n"
echo -ne "${GREEN}       ${1}\n"
echo -ne "${GREEN}=========================================\n"
echo -ne "${CRST}"
pushd "${FACTORY_SRCDIR}"
for module in ${MODULES}; do
	echo -ne "${RED}=========================================\n"
	echo -ne "${RED}            ${module}\n"
	echo -ne "${RED}=========================================\n"
	echo -ne "${CRST}"
	dstdir=${module##*/}
	fetch "${module}"
	compile "${module}"
	shift
	popd
done
}

function mass_produce() {
for file in ${FACTORY_CONFDIR}/*; do
	PACKAGE=$(basename "${file}")
	PACKAGE=${PACKAGE%.*}
	produce "${PACKAGE}"
done
}
# }}}

# Main {{{
case $- in
	*i*) return ;;
	*)
		find "${FACTORY_CONFDIR}" -maxdepth 1 -name '*.conf' -exec basename {} \; | sed "s/.conf//g"
		# mass_produce
		;;
esac
#}}}

# vim: foldmethod=marker:foldlevel=0
