#!/bin/bash +x


# Load conf and defaults
declare -a FACTORY_CFLAGS
declare -a FACTORY_LDFLAGS

source %%FACTORY_CONFDIR%%/factory.config

export FACTORY_SRCDIR FACTORY_CONFDIR FACTORY_PREFIX
export FACTORY_CFLAGS FACTORY_LDFLAGS 

# Support functions {{{
function ar_c_m_mi() {
autoreconf -fiv && \
./configure "${CONF_FLAGS[@]}" --prefix="${FACTORY_PREFIX}" && \
	make "${MAKE_FLAGS[@]}" && \
make install || return 1
}

function a_c_m_mi() {
./autogen.sh && \
./configure "${CONF_FLAGS[@]}" --prefix="${FACTORY_PREFIX}" && \
	make "${MAKE_FLAGS[@]}" && \
make install || return 1
}


function c_m_mi() {
./configure "${CONF_FLAGS[@]}" --prefix="${FACTORY_PREFIX}" && \
	make "${MAKE_FLAGS[@]}" && \
	make install || return 1
}


function m_mi() {
make "${MAKE_FLAGS[@]}" && \
	make install || return 1
}

function m_mip() {
make "${MAKE_FLAGS[@]}" && \
	make install PREFIX="${FACTORY_PREFIX}" || return 1
}

function b_cm_m_mi() {
mkdir build && \
	pushd build && \
	cmake -DCMAKE_INSTALL_PREFIX="${FACTORY_PREFIX}" .. && \
	make "${MAKE_FLAGS[@]}" && \
	make install && \
	popd
}

function p_s() {
python setup.py build
}

function fetch_cvs() {
while (( "${#}" )); do
	# CVSROOT="${REPOSITORY}"
	echo -ne "NOPASSWD\n" | \
		cvs -d "${REPOSITORY}" login
	cvs -d "${REPOSITORY}" checkout "${1}"
	shift
done
}

function fetch_svn() {
while (( "${#}" )); do
	if [ -z "${REPOSITORY_ALIAS}" ]; then
		svn co "${REPOSITORY}/${1}" 
	else 
	svn co "${REPOSITORY}/${1}" "${REPOSITORY_ALIAS}"
	fi
	shift
done
}

function fetch_git() {
while (( "${#}" )); do
	if [ -z "${REPOSITORY_ALIAS}" ]; then
		git clone "${REPOSITORY}/${1}"
	else 
		git clone "${REPOSITORY}/${1}" "${REPOSITORY_ALIAS}"
	fi
	shift
done
}

function fetch_hg() {
while (( "${#}" )); do
	if [ -z "${REPOSITORY_ALIAS}" ]; then
		hg clone "${REPOSITORY}/${1}"
	else 
		hg clone "${REPOSITORY}/${1}" "${REPOSITORY_ALIAS}"
	fi
	shift
done
}


function fetch() {
while (( "${#}" )); do
	fetch_"${METHOD}" "${1}"
	shift
done

}


function compile() {
# There are cases where repository conflict or use
# stupid names.
if [ -n "${REPOSITORY_ALIAS}" ]; then
	dstdir=${REPOSITORY_ALIAS}
else
	# Just basename
	dstdir=${1##*/}
	# Remove .git
	dstdir=${dstdir%*.git}
fi

pushd "${dstdir}" && \
	${BUILD}
popd
}


function produce() {
# All blue print variables are local
local BUILD CONF_FLAGS MODULES REPOSITORY_ALIAS INSTALL_THIS_BLUEPRINT
local DPKGDEP PYDEP REPOSITORY METHOD
local dstdir

if [ -z "${1}" ]; then
	echo "We need a blueprint. Choose from:"
	find "${FACTORY_CONFDIR}" -maxdepth 1 -name '*.conf' -exec basename {} \; | sed "s/.conf//g"
	return 1
fi

BLUEPRINT=${FACTORY_CONFDIR}/${1}.conf
if [ ! -r "${BLUEPRINT}" ]; then
	echo "${RED}Couldn't set up the blueprint for${CRST} ${BLUEPRINT}"
	return
fi

if [ "${INSTALL_THIS_BLUEPRINT}" = "NO" ]; then
	echo "${YELLOW}Plant ${CRST}${BLUEPRINT}${YELLOW} will not be installed${CRST}"
	return
fi
source "${BLUEPRINT}"
echo -ne "${GREEN}=========================================\n"
echo -ne "${GREEN}       ${1}\n"
echo -ne "${GREEN}=========================================\n"
echo -ne "${CRST}"
pushd "${FACTORY_SRCDIR}"
for module in ${MODULES}; do
	echo -ne "${RED}=========================================\n"
	echo -ne "${RED}            ${module}\n"
	echo -ne "${RED}=========================================\n"
	echo -ne "${CRST}"
	dstdir=${module##*/}
	fetch "${module}"
	compile "${module}"
	shift
done
popd
}

function mass_produce() {
for file in ${FACTORY_CONFDIR}/*; do
	PACKAGE=$(basename "${file}")
	PACKAGE=${PACKAGE%.*}
	produce "${PACKAGE}"
done
}
# }}}

# Main {{{
case $- in
	*i*) return ;;
	*)
		find "${FACTORY_CONFDIR}" -maxdepth 1 -name '*.conf' -exec basename {} \; | sed "s/.conf//g"
		# mass_produce
		;;
esac
#}}}

# vim: foldmethod=marker:foldlevel=0
